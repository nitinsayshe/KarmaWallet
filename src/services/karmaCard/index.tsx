import { Kyc } from '../../clients/marqeta/kyc';
import { MarqetaClient } from '../../clients/marqeta/marqetaClient';
import { User } from '../../clients/marqeta/user';
import { IMarqetaCreateUser } from '../../integrations/marqeta/types';
import { generateRandomPasswordString } from '../../lib/misc';
import { IUrlParam } from '../../models/user';
import { IRequest } from '../../types/request';
import * as UserService from '../user';
import * as VisitorService from '../visitor';

const marqetaClient = new MarqetaClient(); // Instantiate the MarqetaClient
const user = new User(marqetaClient); // Instantiate the marqeta User class
const kyc = new Kyc(marqetaClient); // Instantiate the marqeta Kyc class
export interface IKarmaCardRequestBody {
  address1: string;
  address2?: string;
  birthDate: string;
  city: string;
  email?: string;
  firstName: string;
  lastName: string;
  postalCode: string;
  ssn: string;
  state: string;
  urlParams?: IUrlParam[];
}

export const performMarqetaCreateAndKYC = async (userData: IMarqetaCreateUser) => {
  // find the email is already register with marqeta or not
  const { data } = await user.getUserByEmail({ email: userData.email });

  let marqetaResponse;
  if (data.length > 0) {
    // if email is register then update the user in marqeta
    marqetaResponse = await user.updateUser(data[0].token, userData);
  } else {
    // if not register then register user to marqeta
    marqetaResponse = await user.createUser(userData);
  }

  // perform the kyc theough marqeta
  if (marqetaResponse) {
    const kycResponse = await kyc.processKyc({ userToken: marqetaResponse.token });
    marqetaResponse = { marqetaResponse, kycResult: { ...kycResponse.result } };
  }
  return marqetaResponse;
};

export const applyForKarmaCard = async (req: IRequest<{}, {}, IKarmaCardRequestBody>) => {
  const { requestor } = req;
  let visitor;
  const { firstName, lastName, address1, address2, birthDate, postalCode, state, ssn, email, city, urlParams } = req.body;
  if (!firstName || !lastName || !address1 || !birthDate || !postalCode || !state || !ssn || !city) throw new Error('Missing required fields');
  if (!requestor && !email) throw new Error('Missing required fields');

  if (!requestor) {
    // check if exisiting visitor with this email, if so resend the verification email
    visitor = await VisitorService.getVisitorByEmail(email);
    if (!visitor) visitor = await VisitorService.createCreateAccountVisitor({ params: urlParams, email });
  }

  const marqetaKYCInfo: IMarqetaCreateUser = {
    firstName,
    lastName,
    address1,
    address2,
    birthDate,
    postalCode,
    state,
    // hard coded to the US for all applications for now
    country: 'US',
    city,
    email,
    identifications: [
      {
        type: 'SSN',
        value: ssn,
      },
    ],
  };

  if (address2) marqetaKYCInfo.address2 = address2;
  // perform the KYC logic and Marqeta stuff here
  const { marqetaResponse, kycResult } = await performMarqetaCreateAndKYC(marqetaKYCInfo);

  // get the kyc result code
  const kycErrorCodes = (kycResult.codes).map((item: any) => item.code);
  const marqeta = {
    userToken: marqetaResponse.token,
    kycResult: { status: kycResult.status, codes: kycErrorCodes },
    email,
  };
  if (!requestor) {
    // Update the visitors marqeta Kyc status
    visitor = await VisitorService.updateCreateAccountVisitor(visitor, { marqeta, email });
  }

  const isApprovedOrPending = kycResult.status;

  if (isApprovedOrPending !== 'success') {
    return { status: kycResult.status, error: kycErrorCodes, message: 'Your application has been in ( Pending OR declined ). Please check your email for next steps.', visitor };
  }

  let userObject;
  // if there is an existing user, add the marqeta integration to the existing user
  if (!!requestor) {
    // save the marqeta user data
    requestor.integrations.marqeta = marqeta;
    userObject = await requestor.save();
  }

  if (!requestor) {
    // if there is no existing user, create a new user based on the visitor you created before KYC/Marqeta
    // add the marqeta integration to the newly created user or the existing user (userObject)
    userObject = await UserService.register(req, {
      name: `${firstName} ${lastName}`,
      password: generateRandomPasswordString(14),
      visitorId: visitor._id,
      isAutoGenerated: true,
    });
  }
  console.log(userObject);
  // determine the appropriate next steps for getting the user to update their password and login to their profile, maybe an email so that we can also verify their email while we're at it?
  return { status: kycResult.status, message: 'Your application has been submitted. Please check your email to finish setting up your account.', userObject };
};
